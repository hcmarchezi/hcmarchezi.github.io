---
title: "Test-Driven-Development Best Practices"
author: "Humberto C Marchezi"
date: "2010-05-08"
categories: [software-engineering]
---

<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">I recently read a
very intersting conversation in StackOverflow.com about test-driven
development.</span><span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> </span><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">I found it very
instersting and the principles can be summarized as follows: (not
ordered by importance)</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span><span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**1.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Write the test first,
then the code.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: This ensures
that you write testable code and that every line of code gets tests
written for it. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**2.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Design classes using
dependency injection.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: You cannot
mock or test what cannot be seen. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**3.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Separate UI code from
its behavior using Model-View-Controller or
Model-View-Presenter.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: Allows the
business logic to be tested while the parts that can't be tested (the
UI) is minimized. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**4.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Do not write static
methods or classes.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: Static
methods are difficult or impossible to isolate and Rhino Mocks is unable
to mock them. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**5.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Program off
interfaces, not classes.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: Using
interfaces clarifies the relationships between objects. An interface
should define a service that an object needs from its environment. Also,
interfaces can be easily mocked using Rhino Mocks and other mocking
frameworks. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**6.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Isolate external
dependencies.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: Unresolved
external dependencies cannot be tested. </span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">**7.** </span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Mark as virtual the
methods you intend to mock.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Reason: Rhino Mocks
is unable to mock non-virtual methods.</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">8. Use creational
design patterns.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> This will assist
with DI, but it also allows you to isolate that code and test it
independently of other logic.</span></span>  
<span class="Apple-style-span" style="border-collapse: collapse;"><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span></span>  
**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">9. Write tests
using </span>**[<span style="color: blue;">**<u><span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Bill Wake's
Arrange/Act/Assert
technique</span></u>**</span>](http://weblogs.java.net/blog/wwake/archive/2003/12/tools_especiall.html)**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">.</span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> This technique makes
it very clear what configuration is necessary, what is actually being
tested, and what is expected.</span>  
<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span>  
**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">10. Don't be afraid
to roll your own mocks/stubs.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Often, you'll find
that using mock object frameworks makes your tests incredibly hard to
read. By rolling your own, you'll have complete control over your
mocks/stubs, and you'll be able to keep your tests readable. (Refer back
to previous point.)</span>  
<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span>  
**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">11. Avoid the
temptation to refactor duplication out of your unit tests into abstract
base classes, or setup/teardown methods.</span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Doing so hides
configuration/clean-up code from the developer trying to grok the unit
test. In this case, the clarity of each individual test is more
important than refactoring out duplication.</span>  
<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span>  
**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">12. Implement
Continuous Integration.</span>**<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> Check-in your code
on every "green bar." Build your software and run your full suite of
unit tests on every check-in. (Sure, this isn't a coding practice, per
se; but it is an incredible tool for keeping your software clean and
fully integrated.)</span>  
<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">  
</span> **<span class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">Reference:</span>**<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;"> </span>[<span
class="Apple-style-span"
style="font-family: Arial, Helvetica, sans-serif;">http://stackoverflow.com/questions/124210/best-practices-of-test-driven-development-using-c-and-rhinomocks</span>](http://stackoverflow.com/questions/124210/best-practices-of-test-driven-development-using-c-and-rhinomocks)
